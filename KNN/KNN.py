import math
from collections import Counter
class KNN:
    def __init__(self, k=3):
        self.k = k
        self.training_data = []
        self.testing_label = []
    
    def fit(self, x,y):
        self.training_data = x
        self.training_label = y

    def ecludian_distance(self, point1, point2):
        distance = 0
        for i in range(len(point1)):
            distance += (point1[i] - point2[i]) ** 2
        return math.sqrt(distance)

    def predict(self, x_test):
        predictions = []
        for test_point in x_test:
            distances = []
            for i, train_point in enumerate(self.training_data):
                dist = self.ecludian_distance(test_point, train_point)
                distances.append((dist, self.training_label[i]))
                # print(dist)
                # print(distances)
            distances.sort(key=lambda x:x[0])
            knn = distances[:self.k]
            # print(knn)
            # labels = [label for _, label in knn]
            # print(labels)
            most_common_label = Counter(knn).most_common(1)[0][0]

            predictions.append(most_common_label)
        return predictions

if __name__ == "__main__":
    x_train = [[12.69909286, -10.23728291],
              [9.34637193, -11.44263045],
              [8.7131445, -1.43222087],
              [9.2688166, -9.59896776],
              [10.64653812, 4.32495482],
              [3.83460726, -4.70352458],
              [9.14453982, 2.1477749],
              [9.39691801, 0.99853706],
              [6.01646634, -6.35477445],
              [9.58043618, -0.86877726],
              [11.79421809, -1.0968034],
              [9.83897183, -0.77656997],
              [11.36930919, -7.47557862],
              [8.70995942, 4.03912296],
              [4.87487543, -5.99344493],
              [8.92629175, 2.13941283],
              [8.57470188, -10.43129818],
              [10.06644607, -12.14775134],
              [7.31940634, 0.93060483],
              [7.68222071, 2.20139951],
              [11.52356734, 4.21448182],
              [8.28557731, 4.56543595],
              [3.51793279, -7.01467369],
              [9.6913915, 7.2814444],
              [11.87913335, -0.72457325],
              [10.67164759, -10.3697447],
              [3.99967711, -6.18247985],
              [2.93285385, -8.62723217],
              [11.82317539, -10.7657976],
              [9.89939901, 2.85365467],
              [3.43040456, -7.52791532],
              [2.1434758, -7.43064551],
              [9.41260615, -2.59246547],
              [4.12695976, -5.35965466],
              [12.83083512, -8.2589434],
              [4.07647215, -6.03899635],
              [9.10061966, -9.80118008],
              [6.05649183, -3.34430322],
              [7.84075206, 7.32992747],
              [11.19996854, 4.66031011],
              [8.83017164, -10.37257373],
              [1.8302352, -4.35836159],
              [8.92372387, -8.53273833],
              [10.21835548, 4.74698819],
              [9.30761899, -9.11328495],
              [7.60537239, 1.47114071],
              [7.28171055, -10.91849026],
              [9.97820538, 1.4430247],
              [8.80117107, -11.35352259],
              [8.63991402, -11.90045448],
              [4.01252931, -6.3994838],
              [6.32288786, -5.9889826],
              [9.14719283, -11.79851914],
              [8.36903663, 1.84250774],
              [8.88615083, 2.74764887],
              [5.88402429, 3.38479434],
              [2.67514957, -7.33507201],
              [3.19200615, -4.1692371],
              [1.43012916, -6.32903966],
              [9.76765743, 3.7346525],
              [5.03198808, -4.90337064],
              [10.37579814, 4.10646698],
              [4.56666374, -3.07961233],
              [9.04547886, 2.19943804],
              [10.5205002, -1.81666882],
              [8.09552999, 4.94172687],
              [10.75994987, 4.03350408],
              [11.95135091, -9.77343661],
              [12.47240308, 2.31690642],
              [12.67563711, 1.53608781],
              [8.36375803, 1.75832195],
              [9.13352103, -8.56028117],
              [8.1348658, -9.35978272],
              [7.80800437, 3.50402577],
              [11.04283171, -10.18829612]]
    y_train = [3, 3, 0, 3, 1, 2, 0, 0, 2, 0, 0, 0, 3, 1, 2, 0, 3, 3, 0, 0, 1, 1, 2, 1, 0, 3, 2, 2, 3, 1, 2, 2, 0, 2, 3, 2, 3, 2, 1, 1, 3, 2, 3, 1, 3, 0, 3, 0, 3, 3, 2, 2, 3, 0, 0, 1, 2, 2, 2, 1, 2, 1, 2, 0, 0, 1, 1, 3, 0, 0, 0, 3, 3, 1, 3]

    x_test = [[2.93285385, -8.62723217],
             [8.92629175, 2.13941283],
             [8.0371343, 4.71761689],
             [4.40892954, -4.40262978],
             [7.68222071, 2.20139951],
             [11.87913335, -0.72457325],
             [9.34637193, -11.44263045],
             [7.62489892, 1.70952466],
             [10.26860131, 0.81266459],
             [12.67563711, 1.53608781],
             [4.07647215, -6.03899635],
             [2.1434758, -7.43064551],
             [4.56666374, -3.07961233],
             [7.8661093, 1.02629409],
             [10.21835548, 4.74698819],
             [11.52356734, 4.21448182],
             [11.36141513, 3.32485307],
             [8.28557731, 4.56543595],
             [9.83897183, -0.77656997],
             [7.60537239, 1.47114071],
             [6.32288786, -5.9889826],
             [11.95135091, -9.77343661],
             [10.42560919, 1.01384833],
             [4.12695976, -5.35965466],
             [8.43026586, 3.26511398],
             [5.88402429, 3.38479434],
             [5.51593604, -6.29118556],
             [11.79421809, -1.0968034],
             [9.89939901, 2.85365467],
             [7.28171055, -10.91849026],
             [5.64713649, -5.40696012],
             [9.10061966, -9.80118008],
             [1.8302352, -4.35836159],
             [7.00284548, -5.03944002],
             [11.82317539, -10.7657976],
             [9.41260615, -2.59246547],
             [10.75994987, 4.03350408],
             [2.67514957, -7.33507201],
             [9.6913915, 7.2814444],
             [9.76765743, 3.7346525],
             [3.51793279, -7.01467369],
             [7.31940634, 0.93060483],
             [10.06644607, -12.14775134],
             [10.56105787, 5.27244972],
             [11.04283171, -10.18829612],
             [7.27038571, 5.13059771],
             [1.43012916, -6.32903966],
             [7.80800437, 3.50402577],
             [12.69909286, -10.23728291],
             [9.97820538, 1.4430247],
             [3.43040456, -7.52791532],
             [9.58043618, -0.86877726],
             [12.83083512, -8.2589434],
             [13.16856344, 4.82483497],
             [11.59694129, -12.83302451],
             [10.8857351, 5.08119137],
             [11.36930919, -7.47557862],
             [7.84075206, 7.32992747],
             [10.37579814, 4.10646698],
             [3.99967711, -6.18247985],
             [3.83460726, -4.70352458],
             [8.57470188, -10.43129818],
             [9.5548937, 3.19792282],
             [8.70995942, 4.03912296],
             [8.1348658, -9.35978272],
             [5.03198808, -4.90337064],
             [6.05649183, -3.34430322],
             [9.13352103, -8.56028117],
             [6.01646634, -6.35477445],
             [4.01252931, -6.3994838],
             [10.5205002, -1.81666882],
             [10.85566229, 3.77716707],
             [8.36903663, 1.84250774],
             [2.93922507, -7.36588197],
             [4.87487543, -5.99344493],
             [4.96527873, -4.13852764],
             [10.64653812, 4.32495482],
             [8.88615083, 2.74764887],
             [9.52659171, 4.57928918],
             [11.19996854, 4.66031011],
             [9.14453982, 2.1477749],
             [3.19200615, -4.1692371],
             [9.2688166, -9.59896776],
             [12.47240308, 2.31690642],
             [8.92372387, -8.53273833],
             [8.83017164, -10.37257373],
             [8.60637425, 1.9819263],
             [8.09552999, 4.94172687],
             [9.04547886, 2.19943804],
             [9.30761899, -9.11328495],
             [9.39691801, 0.99853706],
             [10.67164759, -10.3697447],
             [9.60825545, -12.03579221],
             [9.85886672, -8.29499429],
             [9.14719283, -11.79851914],
             [8.81649487, -9.73099298],
             [8.36375803, 1.75832195],
             [8.80117107, -11.35352259],
             [8.63991402, -11.90045448],
             [8.7131445, -1.43222087]]

    print('K = 5')
    knn = KNN(k=5)
    knn.fit(x_train, y_train)
    predictions = knn.predict([[3,9]])
    print("Prediction [[3,9]]", predictions)
    predictions = knn.predict(x_test)
    print(x_test, predictions)

    print('K = 1')
    knn = KNN(k=1)
    knn.fit(x_train, y_train)
    predictions = knn.predict([[3,9]])
    print("Prediction [[3,9]]", predictions)
    predictions = knn.predict(x_test)
    print(x_test, predictions)

    print('K = 10')
    knn = KNN(k=10)
    knn.fit(x_train, y_train)
    predictions = knn.predict([[3,9]])
    print("Prediction [[3,9]]", predictions)
    predictions = knn.predict(x_test)
    print(x_test, predictions)